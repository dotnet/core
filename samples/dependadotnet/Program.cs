using System;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Net.Http;
using System.Net.Http.Json;
using System.Text.RegularExpressions;
using static System.Console;

args = new string[] {@"D:\git\dependabot-dotnet-test-projects\"};

if (args is { Length: 0 } || args[0] is not string path)
{
    WriteLine("Must specify a repo root directory as input");
    return;
}

// yaml top-matter

string topMatter =
@"# generated by dependadotnet
# https://github.com/dotnet/core/tree/master/samples/dependadotnet
version: 2
updates:";

WriteLine(topMatter);

/* Generate the following pattern for each project file:

  Note: Wednesday was chosen for quick response to .NET patch Tuesday updates

- package-ecosystem: ""nuget""
  directory: ""/"" #projectfilename
  schedule:
      interval: ""weekly""
      day: ""wednesday""
  open-pull-requests-limit: 5
*/

string packagesJsonUrl = "https://gist.githubusercontent.com/richlander/b6e9d0a2550396813c8899dc8b20748d/raw/baaa3517d802b0f39333887bc0adde66ab110264/packages.json";
HttpClient client = new();
Packages? packages = await client.GetFromJsonAsync<Packages>(packagesJsonUrl);

string validPackageReference = @"PackageReference.*Version=""[0-9]";
string targetFrameworkStart = "<TargetFramework>";
string targetFrameworkEnd = "</TargetFramework>";
string dotnetDir = $"{Path.AltDirectorySeparatorChar}.dotnet";

foreach (string file in Directory.EnumerateFiles(path,"*.*",SearchOption.AllDirectories))
{
    if (!IsProject(file))
    {
        continue;
    }

    string filename = Path.GetFileName(file);
    string? parentDir = Path.GetDirectoryName(file);
    string relativeDir = parentDir?.Substring(path.Length).Replace(Path.DirectorySeparatorChar,Path.AltDirectorySeparatorChar) ?? Path.AltDirectorySeparatorChar.ToString();

    if (relativeDir.StartsWith(dotnetDir))
    {
        continue;
    }
    
    string? targetFramework = null;
    bool match = false;
    foreach (string content in File.ReadLines(file))
    {
        if (targetFramework is null && TryGetTargetFramework(content, out targetFramework))
        {
            Console.WriteLine(targetFramework);
        }

        if (Regex.IsMatch(content, validPackageReference))
        {
            match = true;
            break;
        }
    }

    if (!match)
    {
        continue;
    }

    WriteLine( 
$@"  - package-ecosystem: ""nuget""
    directory: ""{relativeDir}"" #{filename}
    schedule:
      interval: ""weekly""
      day: ""wednesday""
    open-pull-requests-limit: 5");
}

bool IsProject(string filename) => Path.GetExtension(filename) switch
{
    ".csproj" or ".fsproj" or ".vbproj" => true,
    _ => false
};

bool TryGetTargetFramework(string content, [NotNullWhen(true)] out string? targetFramework)
{
    targetFramework = null;
    int start = content.IndexOf(targetFrameworkStart);

    if (start == -1)
    {
        return false;
    }

    int end = content.IndexOf(targetFrameworkEnd);

    if (end == -1 ||
        end < start)
    {
        return false;
    }

    int startOfTFM = start + targetFrameworkStart.Length;
    targetFramework = content.Substring(startOfTFM, end - startOfTFM);

    return targetFramework.StartsWith("net");
}

bool TryGetPackageName(string content, [NotNullWhen(true)] out string? packageName)
{
    packageName = string.Empty;
    Match match = Regex.Match(content, validPackageReference);

    return match.Success;
}

record Packages(Package[] Set);
record Package(string Name, Mapping[] Mapping);
record Mapping(string Version, string TargetFramework);