using System;
using System.IO;
using System.Text.RegularExpressions;
using static System.Console;

if (args is { Length: 0 } || args[0] is not string path)
{
    WriteLine("Must specify a repo root directory as input");
    return;
}

// Print top-matter

string topMatter =
@"#generated by dependadotnet
# Install by `dotnet tool install -g dependadotnet`
# Source: https://github.com/dotnet/core/tree/master/samples/dependadotnet
version: 2
updates:";

WriteLine(topMatter);

/* Generate the following pattern for each project file:
- package-ecosystem: ""nuget""
  directory: ""/"" #projectfilename
  schedule:
      interval: ""weekly""
      day: ""wednesday""
  open-pull-requests-limit: 5

  Note: Wednesday was chosen for quick response to .NET patch Tuesday updates
*/

string regex = @"PackageReference.*Version=""[0-9]";

foreach (string file in Directory.EnumerateFiles(path,"*.*",SearchOption.AllDirectories))
{
    if (!IsProject(file))
    {
        continue;
    }


    string filename = Path.GetFileName(file);
    string? parentDir = Path.GetDirectoryName(file);
    string relativeDir = parentDir?.Substring(path.Length).Replace('\\','/') ?? "/";
    
    bool match = false;
    foreach (string content in File.ReadLines(file))
    {
        match = Regex.IsMatch(content, regex);

        if (match)
        {
            break;
        }
    }

    if (!match)
    {
        continue;
    }

    WriteLine( 
$@"  - package-ecosystem: ""nuget""
    directory: ""{relativeDir}"" #{filename}
    schedule:
      interval: ""weekly""
      day: ""wednesday""
    open-pull-requests-limit: 5");
}

bool IsProject(string filename)
{
    if (filename.Length < 8)
    {
        return false;
    }

    return filename.Substring(filename.Length - 7) switch
    {
        ".csproj" or ".fsproj" or ".vbproj" => true,
        _ => false
    };
}
